// урок 003 про переменные
// var она существует еще до выполнения самого скрипта и она объявлена ВЕЗДЕ СРАЗУ.
// если её вызвать через консоль, то она будет undefined, но она уже есть как ячейка.

// let а лэт, создаётся только тогда, когда код до нее именно доходит. до этого момента
// её нету, даже ячейки такой нету. let видна ТОЛЬКО В БЛОКЕ КОДА ОГРАНИЧЕННОГО {}

// const такая же по поведению, что и let, только ее нельзя изменить - упадет ошибка
// совсем неизменяемых констант в js нет и даже const можно поменять обходными путями













// урок 004 про типы данных

// Infinity - получается при делении на ноль
// NaN - "not a number" при математических операциях где есть строка и число "wasd"*9
// String - можно писать в кавычках "", '', `` - бэктик (ё, тильда)
// var sym = Symbol(); - символ, используется оооочень редко
// boolean - логические
// Null - это когда в коде чего-то просто не существует
// undefined - это когда что-то существует, но никакого значения не имеет, не было присвоено
// var obj = {
//     name: "lol",
//     age: 30
// }; - это объект, это коллекция любых данных. создаётся при помощи {}
// let arr = [1, 2, 3] - это специальный объект - массив. упорядоченные данные












// урок 004.1 про динамическую типизацию
// это возможность одного типа данных превращатся в другие

// в строку
console.log(typeof(String(null)));
console.log(typeof(String(55)));
console.log(typeof('привет' + 10));
console.log('https://vk.com/catalog' + 5); // часто используемый способ

// в число
console.log(typeof(Number('645'))); 
console.log(typeof(+ '5')); // часто используемый способ УНАРНЫЙ ПЛЮС
console.log(5 + + '5'); // будет равно 10. складываем число 5 и строку 5, предварительно приведенную из строки в число
console.log(typeof(parseInt('15px', 10)));

// --- ВСЕ, ЧТО МЫ ПОЛУЧАЕМ ОТ ПОЛЬЗОВАТЕЛЯ БУДЕТ В ФОРМЕ СТРОКИ ---
// let ans = prompt("Hello?", ""); // так мы получим строку в ans!
// let ans = + prompt("Hello?", ""); // а так, плюсик насильно приводит сразу всё к числовому типу данных // почему-то не сработало в обучении 9 или 10 версия, у меня 15
// console.log(ans);

// про boolean тип
// всегда будут FALSE
// 0 ноль
// '' пустая строка
// null
// undefined
// NaN

// всё остальное всегда будет TRUE

console.log(typeof(Boolean('777'))); // приводит к типу boolean
console.log(typeof(!!'777')); // укороченный синтаксис "!!" тоже приводит всё к boolean














// урок 005 про общение с пользователем
// alert("Hello");

// let answer = confirm("Is it you?");
// console.log(answer); // выводим true или false в консоль

let answer1 = prompt("Ты нормальный?", "Нееееее)"); // у prompt лучше всегда хотя бы оставлять вторые кавычки как минимум пустыми
console.log(answer1);
console.log(typeof(answer1));
console.log(typeof(null)); // выведет object




















// урок 006 операторы
let incr = 10,
    decr = 10;

console.log(incr++); // постфиксная форма. такое сначала выведет 10, а потому уже прибавит единицу
console.log(decr--);

console.log(++incr); // а префиксная форма сначала прибавит единицу, а потому уже выведет 11, потому что такой порядок чтения кода!!!
console.log(--decr);

console.log(5%2); // выведит 1, потому что % это оператор, который возвращает остаток от деления

// операторы сравнения
// = присваивание в переменную
// == проверка на равенство
// === строгая проверка на равенство даже по типу данных
console.log('2' == 2); // вернет true
console.log('2' === 2); // вернет false

/*
оператор И в выражении выдаст правду только если оба аргумента дают правду, ИЛИ - если хотя бы один будет правдой
*/
let isChecked = true,
    isClose = true;
console.log(isChecked && isClose); // И вернет true

let isChecked1 = true,
    isClose1 = false;
console.log(isChecked1 || isClose1); // ИЛИ вернет true
console.log(!isChecked1 || isClose1); // ИЛИ вернет false, потому что значек "!" делает из правды ложь и наоборот и лжи правду













// 007 Учимся работать с системой контроля версий Git и с сервисом GitHub
/*
GIT
1. устанавливаем с сайта https://git-scm.com
2. заходим в нашу папку с проектом, нажимаем правую кнопку, заходим в git bash here
3. открывается консоль, пишем "git init", создается скрытая папка гита (пустой репозиторий) в этой же нашей папке
4. дальше нужно создать read me фаил нашей репозитории (описание нашего репозитория)
5. пишем в консоли "echo README.md", создается фаил readme
6. дальше настраиваем наш гит, пишем имя пользователя и почту, чтобы можно было отслеживать кто вносит изменения в наш проект (когда работает большая команда)
7. создаем (пока локально "--local", можно и глобально "--global") имя пользователя "git config --local user.name "Miha" "
8. потом так же пишем почту "git config --local user.email mihailperov90@gmail.com"
9. наш гит готов к работе!


Есть 3 состояния работы гита с файлами:
- гит не связан с файлами
- гит следит за изменением файлов
- гит запомнил изменения

Чтобы сказать гиту следить за файлами, нужно ввести команду "git add -A". -А говорит "добавь ВСЕ файлы себе и следи за ними".
Потом можно посмотреть в любой момент за какими файлами следит гит командой "git status".
Сразу консоль подскажет, что комитов (commits) еще не было, т.е. гит еще не запоминал ни одного изменения.
Чтобы сделать коммит и в гит сохранилась нынешняя версия проекта нужно ввести команду "git commit -a -m "Это наш первый комит" ", где
часть "-m "Это наш первый комит" " это просто комментарий к комиту, чтобы было понятно что это за комит.
Всё, есть первый комит. Потом можно еще раз прописать "git status" и консоль напишет, что комитов делать пока не нужно, у гит есть свежая версия
проекта и изменения в проект пока не вносились.

Потом, если в файлы вносились какие-то изменения в консоли гита можно спросить "git status" и она покажет, в какие файлы вносились изменения.
Можем прописать конкретный фаил "git add *.html" и гит возьмет только .html файлы или "git add -A" и возьмет все файлы.
Проверим "git status" - все будет зелененькое. Теперь можно сделать еще один комит "git commit -a -m "Это наш второй комит" " и
сохранить вторую версию нашего проекта.

Чтобы отследить все изменения в проекте нужно ввести "git log" (это не самая удобная форма отчета). Эта форма лучше: надо ввести команду
"git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short" и вставить это с помощью Shift + Insert в git bash консоль.

Чтобы посмотреть документацию (даже в оффлайн режиме) по любой команде нужно ввести "git <инетересующая команда> --help", например "git add --help"
и получишь всю инфу из документации по команде add.
Чтобы просто очистить консоль он лишнего текста нужно прописать одно слово: "clear".

GIT Hub
1. заходим на сайт гит хаба, входим в аккаунт
2. создаем новую репозиторию, даем описание, галочку с ридми файлом не ставим - ридми мы уже создали локально
3. как создали репозиторий, сразу же открывается его страничка с подсказкой "как подключить этот репозиторий"
4. берем команду git remote add origin https://github.com/MihaThePooh/js_study_ubemy.git и вставляем в гит баш консоль
где remote значит, что мы работаем удаленно, add добавляем, origin псевдоним нашего репозитория (можно назвать как хочешь)
я вставлю git remote add js_study_ubemy https://github.com/MihaThePooh/js_study_ubemy.git
5. потом я ввел команду (как показано в гит хабе) "git branch -M main"
6. потом берем команду "git push -u origin main", где push это команда, которая отправляет все файлы с компа на сайт гит хаб, "-u" это ключ,
который показывает, куда по умолчанию пушить наши файлы, дальше вместо origin идет название нашего репозитория "js_study_ubemy" и "main" это
название нашей главной ветки (в итоге в консоль вставляем "git push -u js_study_ubemy main")

!!! пустые папки не комитятся на гит хаб

!!! чтобы что-то запушить новое на гит хаб, нужно просто написать git push js_study_ubemy

!!! Если ты работал над прокетом дома, а потом пришел на работу и хочешь продолжить работу над проектом, то
1. можно скачать архив и разархивировать тупо
2. можно воспользоваться командой git clone и вставить ссылку, которая лежит в той же кнопке с архивом:
git clone https://github.com/MihaThePooh/js_study_ubemy.git work_at_office, где work_at_office название папки куда все склонируется
3. что-то доработали на работе, допустим. надо все запушить на гит хаб: пишем git status, видим изменения => git add -A, выбираем и добавляем все
файлы => git commit -a -m "делаем пометку", комитим это всё => git push, и пушим - готово, все на гит хабе.
4. приходим домой и хотим что-то еще дописать в коде: заходим в vscode, открываем свой проект и пишем в vscode "git pull" прям в терминале

!!!  ctrl+c, ctrl+c, в терминал пишем :wq! происходит слияние версии на гит хабе и моей локальной версии на компе, если вдруг я
в начале, перед работой над кодом дома, не делал обязательный git pull

.gitignore фаил
это фаил настройки гита, там написаны все файлы и директории, которые не нужно пушить на гит хаб. этот фаил должен быть точно
хотя бы с записью об игнорировании node_modules

GitKraken
удобная прога для работы с комитами, выбором, заменой и прочими манипуляциями

*/


















// 008 урок про условия

let num = 50;

// обычные условия
if (num < 49) {
    console.log("Неверно!");
} else if (num > 100) {
    console.log("Много!");
} else {
    console.log("Верно!");
}

// тернарные выражения того же самого
(num == 50) ? console.log("Bерно!") : console.log("Неверно!");

// условия switch
switch (num) {
    case num < 49:
        console.log("Неверно!");
        break;
    case num > 100:
        console.log("Много!");
        break;
    case num > 80:
        console.log("Все еще много!");
        break;
    case 50:
        console.log("Bерно!");
        break;
    default:
        console.log("Что-то пошло не так!");
        break;
}