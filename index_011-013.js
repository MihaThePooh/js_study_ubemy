// урок 011 callback-функции
/*

callback-функция это функция, которая должна быть выполнена после того, как другая функция завершила свое выполнение. т.е. функция, которая
принемает в качестве аргумента другую функцию, называется callback-функция.

*/

// function learnJS (lang, callback) {
//     console.log("Я учу " + lang);
//     callback();
// }

// function done () {
//     console.log("Я прошел третий урок");
// }

// learnJS("JavaScript", done);















// урок 012 про объекты

/*

*/

// let options = {
//     width: 1024,
//     height: 1024,
//     name: "test"
// };

// console.log(options.name); // выводим имя объекта
// options.bool = false; // записываем новое свойство объекта bool = false

// console.log(options); // смотрим и проверяем - добавлися bool

// // добавляем еще один объект в наш основной объект
// options.colors = {
//     border: "black",
//     bg: "red"
// };

// console.log(options); // смотрим и проверяем - добавлися объект colors

// // сейчас мы попробуем удалить что-то из объекта
// delete options.bool;

// console.log(options); // смотрим и проверяем - bool удалился


// // специальный цикл для того, чтобы просмотреть весь объект, все свойства
// for (let key in options) {
//     console.log("Свойство " + key + " имеет значение " + options[key]);
// }




















// урок 013 массивы и псевдомассивы

// let arr = [1, 2, 3, 4, 5];

// arr.pop(); // удаляет последнее значение в массиве
// arr.push("5"); // добавляет в конец массива новый элемент
// arr.shift(); // удаляет первый элемент массива
// arr.unshift("1"); // добавляет в начало массива новый элемент
// console.log(arr); // смотрим



// перебираем массив по порядку
// первый способ
// for (i = 0; i < arr.length; i++) {
//     console.log(arr[i]);
// }
// // наш массив состоит всего из пяти ячеек. если мы напишем следующий код, то с 5ой по 98ую ячейку будет пустота
// arr[99] = 99;
// console.log(arr); // [ 1, 2, 3, 4, 5, <94 empty items>, 99 ]

// второй способ
// arr.forEach(function(item, i, mass) { 
//     /*
//     item - это каждый элемент в нашем массиве
//     i - номер нашего элемента
//     mass - сам массив для перебора
//     если по результату нужны только элементы из массива, то можно обойтись только первым аргументом item, а другие просто не писать
//     */
//     console.log(i + ": " + item + " (массив: " + mass + ")");
// });

// третий способ (самый новый) НЕ РАБОТАЕТ В ОБЪЕКТАХ. работает на массивах, строках и новых видах объектов
// let mass = [1,3,4,6,7];
// for (let key in mass) {
//     console.log(key); // через такой цикл "in" мы выводим не значения, а ключи к значениям (индексы)
// }
// for (let key of mass) {
//     console.log(key); // через такой цикл "of" мы выводим не ключи, а значения (элементы массива)
// }

// делаем массив из данных пользователя
// тут мы спрашиваем у пользователя какие-то данные, пользователь вводит напирмер "qqq,ww,eeee,rrr" и из этого получается массив
// ["qqq", "ww", "eeee", "rrr"], где split (разделитель) это "," (запятая)
// let ans = prompt("", ""),
//     arr = [];
// arr = ans.split(",");
// console.log(arr);

// теперь делаем одну большую строку из массива с разными строками, чтобы например отправить эту строку на сервер
// метод join берет каждый элемент массива и склеивает все это в строку. в круглые скобки метода join можно поместить разделитель "," (какой хочешь)
// let arr = ["qqq", "ww", "eeee", "rrr"],
//     i = arr.join();
// console.log(i);
// метод sort сортирует строку в алфавитном порядке. с буквами всё понятно, а вот с цифрами пример ниже
// let arr = ["qqq", "ww", "eeee", "rrr"],
//     i = arr.sort();
// console.log(arr);
// sort сортирует по порядку и цифры, только по первому символу цифры. чтобы все цифры выстроить правильно, нужно передать в сорт колбэк такой функции
// let arr1 = [1, 15, 4], 
//     i1 = arr1.sort(compareNum);
//     function compareNum (a, b) {
//         return a-b;
//     }
// console.log(arr1);