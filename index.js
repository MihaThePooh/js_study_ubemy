// урок 003 про переменные
// var она существует еще до выполнения самого скрипта и она объявлена ВЕЗДЕ СРАЗУ.
// если её вызвать через консоль, то она будет undefined, но она уже есть как ячейка.

// let а лэт, создаётся только тогда, когда код до нее именно доходит. до этого момента
// её нету, даже ячейки такой нету. let видна ТОЛЬКО В БЛОКЕ КОДА ОГРАНИЧЕННОГО {}

// const такая же по поведению, что и let, только ее нельзя изменить - упадет ошибка
// совсем неизменяемых констант в js нет и даже const можно поменять обходными путями













// урок 004 про типы данных

// Infinity - получается при делении на ноль
// NaN - "not a number" при математических операциях где есть строка и число "wasd"*9
// String - можно писать в кавычках "", '', `` - бэктик (ё, тильда)
// var sym = Symbol(); - символ, используется оооочень редко
// boolean - логические
// Null - это когда в коде чего-то просто не существует
// undefined - это когда что-то существует, но никакого значения не имеет, не было присвоено
// var obj = {
//     name: "lol",
//     age: 30
// }; - это объект, это коллекция любых данных. создаётся при помощи {}
// let arr = [1, 2, 3] - это специальный объект - массив. упорядоченные данные












// урок 004.1 про динамическую типизацию
// это возможность одного типа данных превращатся в другие

// в строку
console.log(typeof(String(null)));
console.log(typeof(String(55)));
console.log(typeof('привет' + 10));
console.log('https://vk.com/catalog' + 5); // часто используемый способ

// в число
console.log(typeof(Number('645'))); 
console.log(typeof(+ '5')); // часто используемый способ УНАРНЫЙ ПЛЮС
console.log(5 + + '5'); // будет равно 10. складываем число 5 и строку 5, предварительно приведенную из строки в число
console.log(typeof(parseInt('15px', 10)));

// --- ВСЕ, ЧТО МЫ ПОЛУЧАЕМ ОТ ПОЛЬЗОВАТЕЛЯ БУДЕТ В ФОРМЕ СТРОКИ ---
// let ans = prompt("Hello?", ""); // так мы получим строку в ans!
// let ans = + prompt("Hello?", ""); // а так, плюсик насильно приводит сразу всё к числовому типу данных // почему-то не сработало в обучении 9 или 10 версия, у меня 15
// console.log(ans);

// про boolean тип
// всегда будут FALSE
// 0 ноль
// '' пустая строка
// null
// undefined
// NaN

// всё остальное всегда будет TRUE

console.log(typeof(Boolean('777'))); // приводит к типу boolean
console.log(typeof(!!'777')); // укороченный синтаксис "!!" тоже приводит всё к boolean














// урок 005 про общение с пользователем
// alert("Hello");

// let answer = confirm("Is it you?");
// console.log(answer); // выводим true или false в консоль

let answer1 = prompt("Ты нормальный?", "Нееееее)"); // у prompt лучше всегда хотя бы оставлять вторые кавычки как минимум пустыми
console.log(answer1);
console.log(typeof(answer1));
console.log(typeof(null)); // выведет object




















// урок 006 операторы
let incr = 10,
    decr = 10;

console.log(incr++); // постфиксная форма. такое сначала выведет 10, а потому уже прибавит единицу
console.log(decr--);

console.log(++incr); // а префиксная форма сначала прибавит единицу, а потому уже выведет 11, потому что такой порядок чтения кода!!!
console.log(--decr);

console.log(5%2); // выведит 1, потому что % это оператор, который возвращает остаток от деления

// операторы сравнения
// = присваивание в переменную
// == проверка на равенство
// === строгая проверка на равенство даже по типу данных
console.log('2' == 2); // вернет true
console.log('2' === 2); // вернет false

/*
оператор И в выражении выдаст правду только если оба аргумента дают правду, ИЛИ - если хотя бы один будет правдой
*/
let isChecked = true,
    isClose = true;
console.log(isChecked && isClose); // И вернет true

let isChecked1 = true,
    isClose1 = false;
console.log(isChecked1 || isClose1); // ИЛИ вернет true
console.log(!isChecked1 || isClose1); // ИЛИ вернет false, потому что значек "!" делает из правды ложь и наоборот и лжи правду













// 007 Учимся работать с системой контроля версий Git и с сервисом GitHub
/*
1. устанавливаем с сайта https://git-scm.com
2. заходим в нашу папку с проектом, нажимаем правую кнопку, заходим в git bash here
3. открывается консоль, пишем "git init", создается скрытая папка гита (пустой репозиторий) в этой же нашей папке
4. дальше нужно создать read me фаил нашей репозитории (описание нашего репозитория)
5. пишем в консоли "echo README.md", создается фаил readme
6. дальше настраиваем наш гит, пишем имя пользователя и почту, чтобы можно было отслеживать кто вносит изменения в наш проект (когда работает большая команда)
7. создаем (пока локально "--local", можно и глобально "--global") имя пользователя "git config --local user.name "Miha" "
8. потом так же пишем почту "git config --local user.email mihailperov90@gmail.com"
9. наш гит готов к работе!


Есть 3 состояния работы гита с файлами:
- гит не связан с файлами
- гит следит за изменением файлов
- гит запомнил изменения

Чтобы сказать гиту следить за файлами, нужно ввести команду "git add -A". -А говорит "добавь ВСЕ файлы себе и следи за ними"
Потом можно посмотреть в любой момент за какими файлами следит гит командой "git status"
Сразу консоль подскажет, что комитов (commits) еще не было, т.е. гит еще не запоминал ни одного изменения
Чтобы сделать коммит и в гит сохранилась нынешняя версия проекта нужно ввести команду "git commit -a -m "Это наш первый комит" ", где
часть "-m "Это наш первый комит" " это просто комментарий к комиту, чтобы было понятно что это за комит
*/